"""
Script para corrigir observa√ß√µes que n√£o t√™m registro de Internacao.

Este script:
1. Busca todas as observa√ß√µes na tabela ListaObservacao
2. Verifica se cada uma tem um registro correspondente em Internacao
3. Cria o registro de Internacao para as que n√£o t√™m
4. Registra todas as a√ß√µes em log

Executar ANTES de usar o sistema corrigido para garantir consist√™ncia.
"""

import sys
import os

# Adicionar o diret√≥rio do app ao path
sys.path.insert(0, os.path.dirname(os.path.abspath(__file__)))

from app import create_app, db
from app.models import ListaObservacao, Internacao, Atendimento
from datetime import datetime
from zoneinfo import ZoneInfo

def now_brasilia():
    return datetime.now(ZoneInfo("America/Sao_Paulo"))

def corrigir_observacoes_sem_internacao():
    """
    Corrige observa√ß√µes que n√£o t√™m registro de Internacao
    """
    app = create_app()
    
    with app.app_context():
        print("=" * 80)
        print("üîç VERIFICA√á√ÉO E CORRE√á√ÉO DE OBSERVA√á√ïES SEM REGISTRO DE INTERNA√á√ÉO")
        print("=" * 80)
        print()
        
        # Buscar todas as observa√ß√µes
        observacoes = ListaObservacao.query.all()
        total_observacoes = len(observacoes)
        
        print(f"üìä Total de observa√ß√µes encontradas: {total_observacoes}")
        print()
        
        corrigidas = 0
        erros = 0
        ja_ok = 0
        
        for obs in observacoes:
            atendimento_id = obs.id_atendimento
            
            # Verificar se existe registro de Internacao
            internacao = Internacao.query.filter_by(atendimento_id=atendimento_id).first()
            
            if internacao:
                ja_ok += 1
                print(f"‚úÖ Atendimento {atendimento_id}: J√° tem Internacao (ID: {internacao.id})")
            else:
                print(f"‚ùå Atendimento {atendimento_id}: SEM registro de Internacao - CORRIGINDO...")
                
                # Buscar o atendimento
                atendimento = Atendimento.query.get(atendimento_id)
                
                if not atendimento:
                    print(f"   ‚ö†Ô∏è  ERRO: Atendimento {atendimento_id} n√£o encontrado!")
                    erros += 1
                    continue
                
                try:
                    # Criar registro de Internacao
                    nova_internacao = Internacao(
                        atendimento_id=atendimento_id,
                        paciente_id=atendimento.paciente_id,
                        medico_id=atendimento.medico_id,
                        enfermeiro_id=None,
                        hda=f"Observa√ß√£o iniciada em {obs.data_entrada.strftime('%d/%m/%Y %H:%M') if obs.data_entrada else 'data n√£o registrada'}",
                        diagnostico_inicial='Registro criado automaticamente para corre√ß√£o de dados',
                        data_internacao=obs.data_entrada or now_brasilia(),
                        leito='Observa√ß√£o',
                        carater_internacao='Observa√ß√£o',
                        dieta=None
                    )
                    
                    db.session.add(nova_internacao)
                    db.session.flush()
                    
                    print(f"   ‚úÖ Internacao criada com sucesso (ID: {nova_internacao.id})")
                    corrigidas += 1
                    
                except Exception as e:
                    print(f"   ‚ùå ERRO ao criar Internacao: {str(e)}")
                    erros += 1
                    db.session.rollback()
        
        # Commit todas as altera√ß√µes
        if corrigidas > 0:
            try:
                db.session.commit()
                print()
                print("üíæ ‚úÖ Todas as corre√ß√µes foram salvas no banco de dados!")
            except Exception as e:
                print()
                print(f"‚ùå ERRO ao salvar corre√ß√µes: {str(e)}")
                db.session.rollback()
        
        # Resumo final
        print()
        print("=" * 80)
        print("üìä RESUMO DA CORRE√á√ÉO")
        print("=" * 80)
        print(f"Total de observa√ß√µes verificadas: {total_observacoes}")
        print(f"‚úÖ J√° estavam OK: {ja_ok}")
        print(f"üîß Corrigidas: {corrigidas}")
        print(f"‚ùå Erros: {erros}")
        print("=" * 80)
        
        if corrigidas > 0:
            print()
            print("‚ö†Ô∏è  IMPORTANTE: As observa√ß√µes foram corrigidas.")
            print("   Agora voc√™ pode usar o sistema normalmente.")
        elif ja_ok == total_observacoes:
            print()
            print("‚úÖ Tudo OK! Todas as observa√ß√µes t√™m seus registros de Internacao.")
        
        return corrigidas, erros

if __name__ == '__main__':
    print()
    print("üè• HSOP - Sistema de Corre√ß√£o de Observa√ß√µes")
    print()
    
    resposta = input("Deseja executar a corre√ß√£o? (s/n): ").strip().lower()
    
    if resposta in ['s', 'sim', 'y', 'yes']:
        print()
        corrigidas, erros = corrigir_observacoes_sem_internacao()
        print()
        
        if erros > 0:
            print("‚ö†Ô∏è  Alguns erros ocorreram. Verifique os logs acima.")
            sys.exit(1)
        else:
            print("‚úÖ Processo conclu√≠do com sucesso!")
            sys.exit(0)
    else:
        print("‚ùå Opera√ß√£o cancelada pelo usu√°rio.")
        sys.exit(0)

